import os
import io
import zipfile
import rarfile
import platform
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
ADMINS = {1063257439}  # –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω

# –í –ø–∞–º—è—Ç–∏
databases = []
users = {}  # user_id: username


def is_admin(user_id):
    return user_id in ADMINS


async def add_database(file_bytes: bytes, filename: str):
    name = filename
    size = len(file_bytes)
    data_lines = []

    ext = filename.lower().split('.')[-1]

    try:
        if ext == 'zip':
            with zipfile.ZipFile(io.BytesIO(file_bytes)) as zf:
                for fname in zf.namelist():
                    if fname.lower().endswith(('.txt', '.csv')):
                        with zf.open(fname) as f:
                            content = f.read().decode(errors='ignore')
                            data_lines = content.splitlines()
                        name = fname
                        break
                else:
                    return False, "–í ZIP –Ω–µ—Ç txt –∏–ª–∏ csv"

        elif ext == 'rar':
            try:
                with rarfile.RarFile(io.BytesIO(file_bytes)) as rf:
                    for fname in rf.namelist():
                        if fname.lower().endswith(('.txt', '.csv')):
                            with rf.open(fname) as f:
                                content = f.read().decode(errors='ignore')
                                data_lines = content.splitlines()
                            name = fname
                            break
                    else:
                        return False, "–í RAR –Ω–µ—Ç txt –∏–ª–∏ csv"
            except Exception:
                return False, "–û—à–∏–±–∫–∞ RAR: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç unrar –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤"

        elif ext in ('txt', 'csv'):
            content = file_bytes.decode(errors='ignore')
            data_lines = content.splitlines()
        else:
            return False, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"

        databases.append({
            'name': name,
            'data': data_lines,
            'size': size,
            'lines_count': len(data_lines),
        })
        return True, f"‚úÖ –ë–∞–∑–∞ '{name}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞.\n–°—Ç—Ä–æ–∫: {len(data_lines)}\n–†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"


async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    users[user.id] = user.username or user.full_name
    text = (
        "üìÅ *–ë–æ—Ç-–ø–æ–∏—Å–∫–æ–≤–∏–∫ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö*\n\n"
        "üîç /search <–∑–∞–ø—Ä–æ—Å> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–∞–º\n"
        "‚ûï /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑—É\n"
        "üÜò /support ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @gpsblue\n"
        "‚ÑπÔ∏è /info ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    )
    if is_admin(user.id):
        text += (
            "\nüëë –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞:\n"
            "/bdinfo ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–∞–∑–∞–º\n"
            "/adm ‚Äî —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/setadmin <user_id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"
        )
    await update.message.reply_text(text, parse_mode='Markdown')


async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @gpsblue")


async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.document:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add.")
        return

    doc = update.message.document
    file_name = doc.file_name
    if not file_name.lower().endswith(('.csv', '.txt', '.zip', '.rar')):
        await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã: .csv, .txt, .zip, .rar")
        return

    file = await doc.get_file()
    file_bytes = await file.download_as_bytearray()

    success, msg = await add_database(file_bytes, file_name)
    await update.message.reply_text(msg)


async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search –ò–≤–∞–Ω–æ–≤")
        return

    query = ' '.join(args).lower()
    results = []

    for db in databases:
        for line in db['data']:
            if query in line.lower():
                results.append(f"[{db['name']}] {line}")
                if len(results) >= 20:
                    break
        if len(results) >= 20:
            break

    if results:
        await update.message.reply_text("\n".join(results[:20]))
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


async def bdinfo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return

    if not databases:
        await update.message.reply_text("–ë–∞–∑—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return

    lines = []
    total_size = 0
    total_lines = 0

    for db in databases:
        lines.append(f"üìÑ {db['name']} ‚Äî {db['size']} –±–∞–π—Ç ‚Äî {db['lines_count']} —Å—Ç—Ä–æ–∫")
        total_size += db['size']
        total_lines += db['lines_count']

    lines.append(f"\nüìä –û–±—â–∏–π –æ–±—ä—ë–º: {total_size} –±–∞–π—Ç\nüìà –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total_lines}")
    await update.message.reply_text('\n'.join(lines))


async def adm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return

    lines = [
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
        "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + '\n'.join([f"{k} ‚Äî {v}" for k, v in users.items()]),
        f"üì¶ –ë–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {len(databases)}"
    ]

    for db in databases:
        lines.append(f"‚Ä¢ {db['name']} ‚Äî {db['size']} –±–∞–π—Ç ‚Äî {db['lines_count']} —Å—Ç—Ä–æ–∫")

    sysinfo = (
        f"\nüíª –°–µ—Ä–≤–µ—Ä: {platform.system()} {platform.release()}\n"
        f"üêç Python: {platform.python_version()}"
    )

    lines.append(sysinfo)

    await update.message.reply_text('\n'.join(lines))


async def setadmin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞.")
        return

    if not context.args:
        await update.message.reply_text("üõ† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setadmin <user_id>")
        return

    try:
        new_id = int(context.args[0])
        ADMINS.add(new_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /info –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")


def main():
    TOKEN = os.getenv("BOT_TOKEN") or "–í–ê–®_–¢–û–ö–ï–ù_–¢–£–¢"

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler(["start", "info"], info))
    app.add_handler(CommandHandler("support", support))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("search", search))
    app.add_handler(CommandHandler("bdinfo", bdinfo))
    app.add_handler(CommandHandler("adm", adm))
    app.add_handler(CommandHandler("setadmin", setadmin))

    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
